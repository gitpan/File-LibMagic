.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LibMagic 3"
.TH LibMagic 3 "2008-05-18" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
File::LibMagic \- Perlwrapper for libmagic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easy way:
.PP
.Vb 1
\&          use File::LibMagic ':easy';
.Ve
.PP
.Vb 2
\&          print MagicBuffer("Hello World\en"),"\en";
\&          # returns "ASCII text"
.Ve
.PP
.Vb 3
\&          print MagicFile("/bin/ls"),"\en";
\&          # returns "ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV)"
\&          # on my system
.Ve
.PP
To use all capabilities of libmagic use
.PP
.Vb 1
\&          use File::LibMagic ':complete';
.Ve
.PP
.Vb 3
\&          my $handle=magic_open(0);
\&          my $ret   =magic_load($handle,"");  # use default magic file
\&          # OR $ret =magic_load($handle, '/home/someone/.magic');
.Ve
.PP
.Vb 2
\&          print magic_buffer($handle,"Hello World\en"),"\en";
\&          print magic_file($handle,"/bin/ls"),"\en";
.Ve
.PP
.Vb 1
\&          magic_close($handle);
.Ve
.PP
To use the object-oriented interface:
.PP
.Vb 1
\&    use File::LibMagic;
.Ve
.PP
.Vb 1
\&    my $flm = File::LibMagic->new();
.Ve
.PP
.Vb 3
\&    # determine a content description
\&    print $flm->describe_filename('path/to/file');
\&    print $flm->describe_contents('this is some data');
.Ve
.PP
.Vb 3
\&    # determine the MIME type
\&    print $flm->checktype_filename('path/to/file');
\&    print $flm->checktype_contents('this is some data');
.Ve
.PP
Please have a look at the files in the example\-directory.
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The \f(CW\*(C`File::LibMagic\*(C'\fR is a simple perl interface to libmagic from
the file\-4.x package from Christos Zoulas (ftp://ftp.astron.com/pub/file/)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`File::LibMagic\*(C'\fR is a simple perlinterface to libmagic from
the file\-4.x package from Christos Zoulas (ftp://ftp.astron.com/pub/file/).
.Sh "new"
.IX Subsection "new"
Create a new File::LibMagic object to use for determining the type or \s-1MIME\s0
type of content.
.PP
Using the object oriented interface provides an efficient way to repeatedly
determine the magic of a file.  Using the object oriented interface provides
significant performance improvements over using the \f(CW\*(C`:easy\*(C'\fR interface when
testing many files.  This performance improvement is because the loading of
the magic database happens only once, during object creation.
.PP
Each File::LibMagic object loads the magic database independently of other
File::LibMagic objects.
.Sh "checktype_contents"
.IX Subsection "checktype_contents"
Returns the \s-1MIME\s0 type of the data given as the first argument.
.Sh "checktype_filename"
.IX Subsection "checktype_filename"
Returns the \s-1MIME\s0 type of the given file.  This will be the same as returned by
the \f(CW\*(C`file \-i\*(C'\fR command.
.Sh "describe_contents"
.IX Subsection "describe_contents"
Returns a description of the data given as the first argument.
.Sh "describe_filename"
.IX Subsection "describe_filename"
Returns the \s-1MIME\s0 type of the given file.  This will be the same as returned by
the \f(CW\*(C`file\*(C'\fR command.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.Sh "MagicBuffer requires defined content"
.IX Subsection "MagicBuffer requires defined content"
This exception is thrown if \f(CW\*(C`MagicBuffer\*(C'\fR is called with an undefined argument.
.ie n .Sh "libmagic cannot open %s"
.el .Sh "libmagic cannot open \f(CW%s\fP"
.IX Subsection "libmagic cannot open %s"
If libmagic is unable to open the file for which you want to determine the
type, this exception is thrown.  The exception can be thrown by \f(CW\*(C`MagicFile\*(C'\fR
or \f(CW\*(C`magic_file\*(C'\fR.  '%s' contains details about why libmagic was unable to open
the file.
.PP
This exception is only thrown when using libmagic version 4.17 or later.
.Sh "libmagic could not find any magic files"
.IX Subsection "libmagic could not find any magic files"
If libmagic is unable to find a suitable database of magic definitions, this
exception is thrown.  The exception can be thrown by \f(CW\*(C`MagicBuffer\*(C'\fR,
\&\f(CW\*(C`MagicFile\*(C'\fR or \f(CW\*(C`magic_load\*(C'\fR.
.PP
With \f(CW\*(C`magic_load\*(C'\fR, you can specify the location of the magic database with
the second argument.  Depending on your libmagic implementation, you can often
set the \s-1MAGIC\s0 environment variable to tell libmagic where to find the correct
magic database.
.Sh "libmagic out of memory"
.IX Subsection "libmagic out of memory"
If libmagic is unable to allocate enough memory for its internal data
structures, this exception is thrown.  The exception can be thrown by
\&\f(CW\*(C`MagicBuffer\*(C'\fR, \f(CW\*(C`MagicFile\*(C'\fR or \f(CW\*(C`magic_open\*(C'\fR.
.Sh "magic_file requires a filename"
.IX Subsection "magic_file requires a filename"
If \f(CW\*(C`magic_file\*(C'\fR is called with an undefined second argument, this exception
is thrown.
.SH "BUGS"
.IX Header "BUGS"
I'm still learning perlxs ...
.IP "still no real error handling (printf is not enough)" 1
.IX Item "still no real error handling (printf is not enough)"
.SH "HISTORY"
.IX Header "HISTORY"
April 2004 initial Release
.PP
April 2005 version 0.81
.PP
Thanks to James Olin Oden (joden@lee.k12.nc.us) for his help.
Thanks to Nathan Hawkins <utsl@quic.net> for his port to 64\-bit
systems.
.PP
June 2006 version 0.8x (x>1)
Michael Hendricks started to put a lot of work into File::LibMagic.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Fitzner <fitzner@informatik.hu\-berlin.de>,
Michael Hendricks <michael@ndrix.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 by Andreas Fitzner
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
